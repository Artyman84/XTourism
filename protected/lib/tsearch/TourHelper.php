<?php/** * Created by PhpStorm. * User: Arty * Date: 04.09.2017 * Time: 11:22 */namespace TSearch;/** * Class TourHelper * @package TSearch */class TourHelper {    /**     * Returns type of residence     * @param int $adults     * @param int $children     * @param bool $full     * @return string     */    public static function getResidence($adults, $children, $full=false){        $adults = (int)$adults;        $children = (int)$children;        if( $adults > 4 ){            $children += $adults - 4;            $adults = 4;        }        $adultStr = '';        switch( (int)$adults ){            case 1: $adultStr = $full ? '1 взрослый' : 'SGL1'; break;            case 2: $adultStr = $full ? '2 взрослых' : 'DBL2'; break;            case 3: $adultStr = $full ? '3 взрослых' : 'TRPL3'; break;            case 4: $adultStr = $full ? '4 взрослых' : 'QDPL4'; break;        }        $residence = ($full ? '<i class="fa fa-user"></i> ' : '') . $adultStr;        $kids = '';        switch( (int)$children ){            case 1: $kids = $full ? '1 ребёнок' : '1 CHD'; break;            case 2: $kids = $full ? '2 ребёнка' : '2 CHD'; break;            case 3: $kids = $full ? '3 ребёнка' : '3 CHD'; break;            case 4: $kids = $full ? '4 детей' : '4 CHD'; break;            case 5: $kids = $full ? '5 детей' : '5 CHD'; break;        }        if( $kids ){            $residence .= ' + ' . ($full ? '<i class="fa fa-child"></i> ' : '') . $kids;        }        return $residence;    }    /**     * Returns tour nights title     * @param integer $nights     * @param boolean $isNight     * @return bool|int     */    public static function getTourNights($nights, $isNight=true){        switch(self::endingNumberType($nights)){            case 1: return $nights . ($isNight ? ' ночь' : ' день');            case 2: return $nights . ($isNight ? ' ночи' : ' дня');            case 3: return $nights . ($isNight ? ' ночей' : ' дней');        }    }    /**     * Returns tours count title     * @param integer $tours     * @return bool|int     */    public static function getToursCount($tours){        switch(self::endingNumberType($tours)){            case 1: return $tours . ' тур';            case 2: return $tours . ' тура';            case 3: return $tours . ' туров';        }    }    /**     * Returns type of number's ending     * @param integer|string $number     * @return int     */    private static function endingNumberType($number){        $number = (string)$number;        $length = strlen($number);        if( $number[$length-1] == '1' && $number != '11' ){            return 1;        } elseif( in_array($number[$length-1], ['2', '3', '4']) && !in_array($number, ['12', '13', '14']) ){            return 2;        } else {            return 3;        }    }    /**     * Returns hotel's category in "stars"     * @param string|int $category     * @return string     */    public static function hCategoryInStars($category) {        $starts = (int)$category;        $strCategory = '';        if( $starts ){            for($i=1; $i<=5; ++$i){                $strCategory .= '<span class="glyphicon glyphicon-star' . ($i > $starts ? '-empty text-warning' : '') . ' icon-star"></span>';            }        } else {            $strCategory .= '<span class="icon-star">' . $category . '</span>';        }        return $strCategory;    }    /**     * Normalizes hotel's category     * @param string $category     * @return mixed|null     */    public static function normalizeHotelCategory($category){        $normCatNames = [            1 => '1*',            2 => '2*',            3 => '3*',            4 => '4*',            5 => '5*',            'Apartment' => 'Apt'        ];        return !isset($normCatNames[$category]) ? '' : $normCatNames[$category];    }    /**     * Converts number to money format     * @param int|string $number     * @return string     */    public static function normalizePrice($number){        $nParts = explode('.', $number);        $nParts[0] = str_split((string)$nParts[0]);        $r = '';        $j = 0;        for( $i=count($nParts[0]) - 1; $i>=0; --$i ){            if( !($j%3) ){                $r = ' ' . $r;            }            $j++;            $r = $nParts[0][$i] . $r;        }        return trim($r) . (isset($nParts[1]) ? '.' . $nParts[1] : '');    }    /**     * Normalizes currency entity     * @param string $currency     * @return string     */    public static function normalizeCurrency($currency){        switch( strtoupper($currency) ){            case 'USD': return 'usd';            case 'EURO':case 'EUR': return 'euro';            case 'RUR': case 'RUB': case 'RUBLE': return 'ruble';            default: return '';        }    }    /**     * Returns currency in html entity     * @param string $currency     * @return string     */    public static function htmlCurrency($currency){        $norm_currency = self::normalizeCurrency($currency);        return $norm_currency ? '<span class="glyphicon glyphicon-' . $norm_currency . '"></span>' : '';    }    /**     * Returns week day     * @param int $date     * @param string $lang     * @return string     */    public static function weekDay($date, $lang='ru'){        $week = date('D', $date);        if( $lang == 'ru' ){            switch( $week ){                case 'Mon': return 'пн';                case 'Tue': return 'вт';                case 'Wed': return 'ср';                case 'Thu': return 'чт';                case 'Fri': return 'пт';                case 'Sat': return 'сб';                case 'Sun': return 'вс';            }        }        return $week;    }    /**     * Returns format date     * @param int $timestamp     * @return string     */    public static function formatDate1($timestamp){        $months = ['Янв.', 'Фев.', 'Марта', 'Апр.', 'Мая', 'Июня', 'Июля', 'Авг.', 'Сент.', 'Октяб.', 'Нояб.', 'Дек.'];        return date('j', $timestamp) . ' ' . $months[date('n', $timestamp) - 1] . ' ' . date('Y', $timestamp);    }    /**     * Returns format date     * @param int $timestamp     * @return string     */    public static function formatDate2($timestamp){        $months = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];        return date('j', $timestamp) . ' ' . $months[date('n', $timestamp) - 1] . ' ' . date('Y', $timestamp);    }}